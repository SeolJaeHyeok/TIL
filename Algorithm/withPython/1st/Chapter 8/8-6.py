# 개미 전사
# 정수 N을 입력 받기
n = int(input())
# 모든 식량 정보 입력 받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

# 계산된 결과 출력
print(d[n - 1])
print(d)

"""
접근 방법
총 창고의 개수를 i라고 했을 때,
일직선으로 나열된 식량 창고의 경우 맨 마지막 창고를 포함하느냐(i-2번째 까지의 최적의 해 + 현재 식량 창고의 크기) 포함하지 않느냐(i-1까지의 최적의 해)
두 개를 비교하여 큰 값(i번째 식량창고까지 털었을 때의 최적의 해)을 DP 테이블에 추가하는 방식으로 구현
보텀업 방식으로 두 개의 작은 문제를 가지고 큰 문제를 해결
"""
