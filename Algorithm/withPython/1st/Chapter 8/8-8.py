# 효율적인 화폐 구성
# 정수 N, M을 입력 받기
n, m = map(int, input().split())
# N개의 화폐 단위 정보를 입력 받기
array = []
for i in range(n):
    array.append(int(input()))

# 한 번 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [10001] * (m + 1)

# 다이나믹 프로그래밍(Dynamic Programming) 진행(보텀업)
d[0] = 0
for i in range(n):
    for j in range(array[i], m + 1):
        if d[j - array[i]] != 10001:  # (i - k)원을 만드는 방법이 존재하는 경우
            d[j] = min(d[j], d[j - array[i]] + 1)

# 계산된 결과 출력
if d[m] == 10001: # 최종적으로 M원을 만드는 방법이 없는 경우
    print(-1)
else:
    print(d[m])


"""
접근 방법
- 금액 i를 만들 수 있는 최소한의 화폐 개수: a[i]
- 화폐의 단위: k
- 점화식: 각 화폐의 단위인 k를 하나씩 확인하며
    - a[i-k]를 만드는 방법이 존재할 경우, a[i] = min(a[i], a[i-k] + 1)
    - a[i-k]를 만드는 방법이 존재하지 않는 경우, a[i] = INF

1) 만약 화폐단위 k를 가지고 i번째 인덱스(금액)를 검사할 때 a[i-k]의 방법이 DP 테이블 상에 존재한다면 해당 값 + 1을 해서 값을 테이블에 저장한다.
왜? 예를 들어, a[i-k] 값이 2라면 k를 한 번 더하는 것이 해당 화폐 단위에서 금액(i)을 구할 수 있는 최솟값이 되기 때문
단, a[i-k] 값이 이미 존재한다면(10001이 아니라면) 값을 비교하여 작은 값으로 갱신한다. 존재하지 않으면(10001)이라면 당연히 a[i]를 구하는 방법도 존재x

2) 주어진 화폐 단위를 가지고 위 과정을 반복하면 DP 테이블이 갱신되면서 각 금액마다 필요한 최소한의 화폐개수가 구해진다.
ex)화폐단위가 2,3,5이고 합이 7인 경우,
화폐 단위 2를 검사할 때 리스트는 [0, 10001, 1, 10001, 2, 10001, 3, 10001, ....]이 될 것이다.
화폐 단위 3을 검사할 때 리스트는 [0, 10001, 1, 1, 2, 2, 2, 3, ....]이 될 것이다.
화폐 단위 5를 검사할 때 리스트는 [0, 10001, 1, 1, 2, 1, 2, 2, ....]이 될 것이다.
"""