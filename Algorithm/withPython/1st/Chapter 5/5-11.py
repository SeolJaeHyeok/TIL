# 미로 탈출

# sol
from collections import deque


n, m = map(int, input().split())

graph = []
for _ in range(n):
    graph.append(list(map(int, input())))

# 이동할 네 방향 정의(상, 하, 좌, 우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


def bfs(x, y):
    queue = deque()
    queue.append((x, y))
    # 큐가 빌 때까지 반복
    while queue:
        x, y = queue.popleft()
        # 현재 위치에서 네 방향으로의 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            # 미로 찾기 공간을 벗어난 경우 무시
            if nx < 0 or ny < 0 or nx >= n or ny >= m:
                continue
            # 벽인 경우 무시
            if graph[nx][ny] == 0:
                continue
            # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
            if graph[nx][ny] == 1:
                graph[nx][ny] = graph[x][y] + 1
                queue.append((nx, ny))

    return graph[n-1][m-1]


print(bfs(0, 0))

"""
풀이 해석
가장 오른쪽 아래로 이동한 거리를 구하는 것이므로 큐를 이용해 가장 가까운 노드로 이동했을 때 값을 1씩 더해주는 방법으로 접근
시작점은 1로 고정이므로 (0,0)의 값은 1

- 우선 이동할 네 방향을 정의해 준다. <- 상하좌우로 이동해야할 때는 이렇게 이동할 방향을 먼저 정의해주는 것이 굉장히 많이 나오니까 꼭 알아두자

- 큐에 현재 위치를 추가해주고 큐가 사라질 때까지 반복한다.
  큐 안에 있는 값을 pop해서 현재 위치(x,y)에서 상, 하, 좌, 우로 이동할 수 있는 좌표가 있는지 확인한다.

- x, y를 통해 상, 하, 좌, 우로 1씩 이동한 좌표값(nx, ny)을 구하고 입력받은 그래프를 통해 네 방향의 값을 확인한다.
  -> 한 번에 구하는 것이 아닌 반복문을 통해 현재 위치(x,y)의 상, 하, 좌, 우 순서대로 아래 과정이 이루어짐 

- 공간을 벗어난 경우와 네 방향 중에서 해당 좌표의 값이 0인 경우는 갈 수 없으므로 조건을 걸어 걸러준다.

- 만약 상, 하, 좌, 우로 이동한 값이 1이라면(이동할 수 있다면) 해당 위치에 (현재 위치의 값 + 1)을 하고 해당 위치를 큐에 추가해준다.

- 위 과정을 큐가 사라질 때까지 반복하고(마지막 큐까지 오면) 마지막 큐 값에 저장된 값을 리턴
  -> 마지막 큐 값에 저장된 값은 시작좌표부터 이동가능한 위치로 이동하면서 1씩 더한 값들의 최종 합계가 저장된다.

"""